/*
    This screen is presented to the user to link this application to
    their bank account. 

    A link token is generated by making an API call to the /link/token/create
    endpoint

    The link token is then exhanged for a public and access token in order to use
    the other Plaid API services and products
*/ 

import React, { useState, useCallback, useEffect } from 'react';
import { Text, View, StyleSheet, Image } from 'react-native';
import { PlaidLink, LinkSuccess, LinkExit } from 'react-native-plaid-link-sdk';
import { useAppConext } from '../context/AppContext';

const LinkAccountScrceen = () => {

    const [linkToken, setLinkToken] = useState("");
    const { currentUserID, getAccessToken, accessToken } = useAppConext();
    
    const generateLinkToken = useCallback(async () => {
        console.log("Awaiting generating of token");

        // http://192.168.1.5:8085
        await fetch('http://192.168.1.4:8085/link/token/create', {

            method: 'POST',
            headers: {

                "Content-Type": "application/json"
            },
            // passing the current user's document ID to the Node JS server
            body: JSON.stringify({ userID: currentUserID })
            })
            .then((response) => response.json())
            .then((data) => {
                console.log("Setting token to: " + data);
                setLinkToken(data);
            })
            .catch((err) => {

                console.log("Generating token error: " + err);

            });
        }, [setLinkToken]) 

        useEffect(() => {

            if (linkToken == "") {
                console.log("Token = ''");
                generateLinkToken();
            }
            getAccessToken(currentUserID);
        }, [linkToken]);

        // if the user logged in has an access token
        if(accessToken) {

            return (
                <View style={styles.screenLayout}>
                    <View>
                        <Text style={styles.title}>Bank Account Linked</Text>
                        <Text style={styles.subTitle}>You have successfully linked your eConomizer account to your personal bank account!</Text>
                    </View>

                    <View style={{alignItems: 'center', marginTop: 90}}>
                        <Image source={require('../assets/icons/link.png')} style={{width: 300, height: 300, resizeMode: 'contain'}}/>
                    </View>
                </View>

            )

        } else if(linkToken) { // if a link token has been generated and the user hasn't linked a bank account

            return (
                
                <View style={styles.screenLayout}>
                    <View>
                        <Text style={styles.title}>Add Bank Account</Text>
                        <Text style={styles.subTitle}>In order to see transactions from your bank account link your eConomizer
                        account to your bank account by pressing the button below</Text>
                    </View>

                    <View>
                        <Image source={require('../assets/icons/purple-euro-bank.png')} style={{width: 350, height: 350, resizeMode: 'contain', alignSelf: 'center', marginTop: 35}}/>
                    </View>
        
                    <PlaidLink
                        tokenConfig={{ token: linkToken, noLoadingState: false }}
                        onSuccess={ async (success: LinkSuccess) => {
                            console.log("Awating exchange of tokens");
                            
                            // "http://192.168.1.5:8085/item/public_token/exchange"
                            await fetch("http://192.168.1.4:8085/item/public_token/exchange", {
        
                                method: "POST",
        
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                
                                // passing the public token and the current user's document ID to the server
                                body: JSON.stringify({ public_token: success.publicToken, userID: currentUserID}),
                            })
                            .catch((err) => {
                                console.log(err);
                            });
        
                            console.log(success + ": " + success.publicToken); 
                            console.log("Bank account added successfully added!");
                            
                        }}
                        onExit={(response: LinkExit) => {
                            console.log(response);
                        }}
                    >
                        <Text style={styles.linkAccountText}>Add Bank Account</Text>
                    </PlaidLink>
                </View>
            )

        } else { // if a link token hasn't been generated or error from the server

            return (

                <View style={styles.screenLayout}>
                    <View>
                        <Text style={styles.title}>Error</Text>
                        <Text style={styles.subTitle}>Error in generating a link token from the server, Please try again.</Text>
                    </View>

                    <View style={{alignItems: 'center', marginTop: 90}}>
                        <Image source={require('../assets/icons/error-404.png')} style={{width: 300, height: 300, resizeMode: 'contain'}}/>
                    </View>
                </View>
            )
        }

};
  
const styles = StyleSheet.create({
    screenLayout:{
        padding: 20,
        flex: 1,
        backgroundColor: 'white'
    },

    title: {
        fontFamily: 'GTWalsheimPro-Regular',
        marginTop: 10, 
        fontSize: 25,
        textAlign: "center",
        
    },

    subTitle: {

        margin: 10, 
        fontSize: 17,
        fontFamily: 'GTWalsheimPro-Regular',
        textAlign: "center",

    },

    addAccountButton: {

        position: 'absolute',
        padding: 10,
        alignSelf: 'center',
        backgroundColor: '#8B19FF',
        borderRadius: 10,
        marginTop: 60,
        color: 'white'
    },

    linkAccountText: {

        marginTop: 60, 
        fontFamily: 'GTWalsheimPro-Regular',
        fontSize: 20,
        textAlign: "center",
        borderRadius: 10,
        backgroundColor: '#8B19FF',
        color: "white",
        padding: 10,
    },

});
export default LinkAccountScrceen;